package com.example.demo;

import com.example.demo.service.dtos.UserDto;
import com.example.demo.service.dtos.UserRootDto;
import com.example.demo.service.dtos.UserSeedDto;
import com.example.demo.service.services.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import java.io.File;
import java.io.FileOutputStream;
import java.util.List;

@Component
public class CmdRunner implements CommandLineRunner {

    private final UserService userService;

    @Autowired
    public CmdRunner(UserService userService) {
        this.userService = userService;
    }

    @Override
    public void run(String... args) throws Exception {
//        UserSeedDto userSeedDto1 = new UserSeedDto("Konstantin","Mitev","Sofia");
//        UserSeedDto userSeedDto2 = new UserSeedDto("Gosho","Petkov","Varna");
//        UserSeedDto userSeedDto3 = new UserSeedDto("Nikolay","Koev","Trun");
//
//        this.userService.save(userSeedDto1);
//        this.userService.save(userSeedDto2);
//        this.userService.save(userSeedDto3);
        //Export single UserRootDto with list of UserDto
//        List<UserDto>  users = this.userService.findAll();
//        UserRootDto user = new UserRootDto();
//        user.setUsers(users);

        //export single userDto
//        UserDto user = this.userService.findById(2);


        // export from object to xml
//        JAXBContext context = JAXBContext.newInstance(user.getClass());
//        Marshaller marshaller = context.createMarshaller();
//        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
//        marshaller.marshal(user,new File(USERS_FILE_PATH));

        //Import java object from xml
//        JAXBContext context = JAXBContext.newInstance(UserRootDto.class);
//        Unmarshaller unmarshaller = context.createUnmarshaller();
//        UserRootDto userRootDto = (UserRootDto) unmarshaller
//                .unmarshal(new File(USERS_FILE_PATH));
//
        this.userService.seedUsers();
        System.out.println();
//        UserSeedDto userSeedDto1 = new UserSeedDto("Konstantin","Mitev","Sofia");
//        UserSeedDto userSeedDto2 = new UserSeedDto("Gosho","Petkov","Varna");
//        UserSeedDto userSeedDto3 = new UserSeedDto("Nikolay","Koev","Trun");
//
//        this.userService.save(userSeedDto1);
//        this.userService.save(userSeedDto2);
//        this.userService.save(userSeedDto3);
    }
}

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<users>
    <user>
        <first_name>Konstantin</first_name>
        <lastName>Mitev</lastName>
        <city>Sofia</city>
    </user>
    <user>
        <first_name>Gosho</first_name>
        <lastName>Petkov</lastName>
        <city>Varna</city>
    </user>
    <user>
        <first_name>Nikolay</first_name>
        <lastName>Koev</lastName>
        <city>Trun</city>
    </user>
</users>


package com.example.demo.utils;

import org.springframework.context.annotation.Bean;

import javax.xml.bind.JAXBException;
import java.io.FileNotFoundException;

public interface XMLParser {
    // object is which object to export and path is to which path/xml file
    <O> void exportToXML(O object, String path) throws JAXBException;

    // path is from where to read the path/xml file
    <O> O importFromXml(Class<O> klass, String path) throws JAXBException, FileNotFoundException;
}


package com.example.demo.utils;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;

public class XMLParserImpl implements XMLParser{
    @Override
    public <O> void exportToXML(O object, String path) throws JAXBException {
        JAXBContext context = JAXBContext.newInstance(object.getClass());
        Marshaller marshaller = context.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
        marshaller.marshal(object,new File(path));
    }

    @Override
    @SuppressWarnings("unchecked")
    public <O> O importFromXml(Class<O> klass, String path) throws JAXBException, FileNotFoundException {
        JAXBContext context = JAXBContext.newInstance(klass);
        Unmarshaller unmarshaller = context.createUnmarshaller();
        return (O) unmarshaller.unmarshal(new FileReader(path));
    }
}


package com.example.demo.service.services;

import com.example.demo.service.dtos.UserDto;
import com.example.demo.service.dtos.UserSeedDto;

import javax.xml.bind.JAXBException;
import java.io.FileNotFoundException;
import java.util.List;

public interface UserService {

    void save(UserSeedDto userSeedDto);

    void seedUsers() throws JAXBException, FileNotFoundException;

    List<UserDto> findAll();

    UserDto findById(long id);
}


package com.example.demo.service.services;

import com.example.demo.data.entities.User;
import com.example.demo.data.repositories.UserRepository;
import com.example.demo.service.dtos.UserDto;
import com.example.demo.service.dtos.UserRootDto;
import com.example.demo.service.dtos.UserSeedDto;
import com.example.demo.utils.XMLParser;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.xml.bind.JAXBException;
import java.io.FileNotFoundException;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class UserServiceImpl implements UserService {

    private UserRepository userRepository;
    private ModelMapper modelMapper;
    private final XMLParser xmlParser;
    private final String USERS_FILE_PATH = "src/main/resources/xmls/users.xml";

    @Autowired
    public UserServiceImpl(UserRepository userRepository, ModelMapper modelMapper
            , XMLParser xmlParser) {
        this.userRepository = userRepository;
        this.modelMapper = modelMapper;
        this.xmlParser = xmlParser;
    }

    // Save UserSeedDto to the database
    @Override
    public void save(UserSeedDto userSeedDto) {
        this.userRepository.save(this.modelMapper.map(userSeedDto, User.class));
    }

    @Override
    public void seedUsers() throws JAXBException, FileNotFoundException {
        UserRootDto dtos = this.xmlParser
                .importFromXml(UserRootDto.class,USERS_FILE_PATH);
        for (UserDto user : dtos.getUsers()) {
            this.userRepository.saveAndFlush(this.modelMapper
            .map(user,User.class));
        }
    }

    // Get UserDto from the database
    @Override
    public List<UserDto> findAll() {
        return this.userRepository.findAll()
                .stream()
                .map(u -> this.modelMapper.map(u,UserDto.class))
                .collect(Collectors.toList());
    }

    // Find a single User
    @Override
    public UserDto findById(long id) {
        User user = this.userRepository.findById(id).orElse(null);
        UserDto userDto = this.modelMapper.map(user, UserDto.class);
//        UserDto user2 = this.modelMapper.map(this.userRepository.findById(id).orElse(null),UserDto.class);
        return userDto;
    }
}


package com.example.demo.config;

import com.example.demo.utils.XMLParser;
import com.example.demo.utils.XMLParserImpl;
import org.modelmapper.ModelMapper;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ApplicationBeanConfiguration {

    @Bean
    public ModelMapper modelMapper(){
        return new ModelMapper();
    }

    @Bean
    public XMLParser xmlParser(){
        return new XMLParserImpl();
    }
}
