
@Component
public class CmdRunner implements CommandLineRunner {

    private final UserService userService;
    private final String USERS_FILE_PATH = "src/main/resources/xmls/users.xml";

    @Autowired
    public CmdRunner(UserService userService) {
        this.userService = userService;
    }

    @Override
    public void run(String... args) throws Exception {

        //Export single UserRootDto with list of UserDto
        List<UserDto>  users = this.userService.findAll();
        UserRootDto user = new UserRootDto();
        user.setUsers(users);

        //export single userDto
//        UserDto user = this.userService.findById(2);
        JAXBContext context = JAXBContext.newInstance(user.getClass());
        Marshaller marshaller = context.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        marshaller.marshal(user,new File(USERS_FILE_PATH));

//        UserSeedDto userSeedDto1 = new UserSeedDto("Konstantin","Mitev","Sofia");
//        UserSeedDto userSeedDto2 = new UserSeedDto("Gosho","Petkov","Varna");
//        UserSeedDto userSeedDto3 = new UserSeedDto("Nikolay","Koev","Trun");
//
//        this.userService.save(userSeedDto1);
//        this.userService.save(userSeedDto2);
//        this.userService.save(userSeedDto3);
    }
}

/*
// Save 3 Users to the database
@Override
    public void run(String... args) throws Exception {
        UserSeedDto userSeedDto1 = new UserSeedDto("Konstantin","Mitev","Sofia");
        UserSeedDto userSeedDto2 = new UserSeedDto("Gosho","Petkov","Varna");
        UserSeedDto userSeedDto3 = new UserSeedDto("Nikolay","Koev","Trun");

        this.userService.save(userSeedDto1);
        this.userService.save(userSeedDto2);
        this.userService.save(userSeedDto3);
    }
 */


/*
//Export Single User in xml as
<userDto>
    <first_name>Gosho</first_name>
    <lastName>Petkov</lastName>
    <city>Varna</city>
</userDto>

 @Override
    public void run(String... args) throws Exception {
        UserDto user = this.userService.findById(2);
        JAXBContext context = JAXBContext.newInstance(user.getClass());
        Marshaller marshaller = context.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        marshaller.marshal(user,new File(USERS_FILE_PATH));
    }
 */


@Service
public class UserServiceImpl implements UserService {

    private UserRepository userRepository;
    private ModelMapper modelMapper;

    @Autowired
    public UserServiceImpl(UserRepository userRepository, ModelMapper modelMapper) {
        this.userRepository = userRepository;
        this.modelMapper = modelMapper;
    }

    // Save UserSeedDto to the database
    @Override
    public void save(UserSeedDto userSeedDto) {
        this.userRepository.save(this.modelMapper.map(userSeedDto, User.class));
    }

    @Override
    public void seedUsers() {

    }

    // Get UserDto from the database
    @Override
    public List<UserDto> findAll() {
        return this.userRepository.findAll()
                .stream()
                .map(u -> this.modelMapper.map(u,UserDto.class))
                .collect(Collectors.toList());
    }

    // Find a single User
    @Override
    public UserDto findById(long id) {
        User user = this.userRepository.findById(id).orElse(null);
        UserDto userDto = this.modelMapper.map(user, UserDto.class);
//        UserDto user2 = this.modelMapper.map(this.userRepository.findById(id).orElse(null),UserDto.class);
        return userDto;
    }
}



public interface UserService {

    void save(UserSeedDto userSeedDto);

    void seedUsers();

    List<UserDto> findAll();

    UserDto findById(long id);
}


package com.example.demo.service.dtos;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

// @XmlRootElement says that the class will be the root element in the xml
//@XmlAccessorType(value = XmlAccessType.FIELD)  says that we will write the annotations
//on he fields
@XmlRootElement(name = "user")
@XmlAccessorType(value = XmlAccessType.FIELD)
public class UserDto {

    @XmlElement(name = "first_name")
    private String firstName;
    @XmlElement
    private String lastName;
    @XmlElement
    private String city;

    public UserDto() {
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }
}



package com.example.demo.service.dtos;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import java.util.List;

// The root element is in plural because it holds many single UserDto
@XmlRootElement(name = "users")
@XmlAccessorType(XmlAccessType.FIELD)
public class UserRootDto {

    /*
    The name "user" in
    @XmlRootElement(name = "user")
        public class UserDto { }
    must be the same as the user on this list field
    @XmlElement(name = "user") // single user
    private List<UserDto> users;
     */

    // The element is user, because it corresponds to a single user dto object
    // user will be the xml tag for a single UserDto object in the users.xml
    @XmlElement(name = "user") // user is for a single user dto name
    private List<UserDto> users;

    public UserRootDto() {
    }

    public List<UserDto> getUsers() {
        return users;
    }

    public void setUsers(List<UserDto> users) {
        this.users = users;
    }
}


package com.example.demo.service.dtos;

public class UserSeedDto {

    private String firstName;
    private String lastName;
    private String city;

    public UserSeedDto() {
    }

    public UserSeedDto(String firstName, String lastName, String city) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.city = city;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }
}



package com.example.demo.data.entities;

import javax.persistence.Entity;
import javax.persistence.Table;

@Entity
@Table(name = "users")
public class User extends BaseEntity {

    private String firstName;
    private String lastName;
    private String city;

    public User(){
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }
}


package com.example.demo.data.entities;

import javax.persistence.*;

@MappedSuperclass
public abstract class BaseEntity {

    private long id;

    public BaseEntity() {
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id",unique = true,updatable = false , nullable = false)
    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }
}


@Repository
public interface UserRepository extends JpaRepository<User, Long> {
}